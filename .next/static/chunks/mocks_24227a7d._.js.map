{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/facuo/OneDrive/Documentos/UTN/4to/DAO/TP-Git/tp_dao/mocks/handlers.ts"],"sourcesContent":["import { http, HttpResponse } from 'msw';\r\nimport pacientesSeed from './seed/pacientes.json';\r\nimport medicosSeed from './seed/medicos.json';\r\nimport especialidadesSeed from './seed/especialidades.json';\r\nimport agendaSeed from './seed/agenda_medico.json';\r\nimport turnosSeed from './seed/turnos.json';\r\nimport recetasSeed from './seed/recetas.json';\r\n\r\ntype ID = number;\r\n\r\nlet pacientes = [...pacientesSeed];\r\nlet medicos = [...medicosSeed];\r\nlet especialidades = [...especialidadesSeed];\r\nlet agenda = [...agendaSeed];\r\nlet turnos = [...turnosSeed];\r\nlet recetas = [...recetasSeed];\r\n\r\nconst nextId = (arr: {id:ID}[]) => (arr.length ? Math.max(...arr.map(x=>x.id)) + 1 : 1);\r\n// Helpers sin tipos: garantizan objeto plano para poder usar \"...\"\r\nconst asObj = (x: unknown) =>\r\n  x && typeof x === 'object' && !Array.isArray(x) ? (x as Record<string, unknown>) : {};\r\n\r\nconst readJsonObj = async (req: Request): Promise<Record<string, unknown>> => {\r\n  try {\r\n    const data = await req.json();\r\n    return asObj(data);\r\n  } catch {\r\n    return {};\r\n  }\r\n};\r\n\r\n\r\n// Helpers\r\nfunction pageOf<T>(rows: T[], page = 1, size = 10) {\r\n  const start = (page - 1) * size;\r\n  return { data: rows.slice(start, start + size), page, size, total: rows.length };\r\n}\r\nfunction withinSchedule(medico_id: ID, iso: string, duracion_min: number) {\r\n  const d = new Date(iso);\r\n  const day = d.getDay(); // 0..6\r\n  const pad = (n:number)=>String(n).padStart(2,'0');\r\n  const hm = (h:number,m:number)=>`${pad(h)}:${pad(m)}`;\r\n  const hh = d.getHours(), mm = d.getMinutes();\r\n  const start = hm(hh, mm);\r\n\r\n  const seg = agenda.filter(a=>a.medico_id===medico_id && a.dia_semana===day);\r\n  if (!seg.length) return false;\r\n\r\n  const addMin = (iso:string, min:number) => new Date(new Date(iso).getTime() + min*60000).toISOString();\r\n  const end = addMin(iso, duracion_min);\r\n  const ehh = new Date(end).getHours(), emm = new Date(end).getMinutes();\r\n  const endStr = hm(ehh, emm);\r\n\r\n  return seg.some(a => start >= a.hora_inicio && endStr <= a.hora_fin);\r\n}\r\nfunction overlaps(medico_id: ID, iso: string, duracion_min: number) {\r\n  const start = new Date(iso).getTime();\r\n  const end = start + duracion_min * 60000;\r\n  return turnos.some(t => t.medico_id===medico_id && (() => {\r\n    const s = new Date(t.fecha_hora).getTime();\r\n    const e = s + t.duracion_min * 60000;\r\n    return Math.max(s, start) < Math.min(e, end);\r\n  })());\r\n}\r\n\r\nexport const handlers = [\r\n  // Pacientes\r\n  http.get('/api/pacientes', ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const search = (url.searchParams.get('search') || '').toLowerCase();\r\n    const page = Number(url.searchParams.get('page') || '1');\r\n    const size = Number(url.searchParams.get('size') || '10');\r\n    let rows = [...pacientes];\r\n    if (search) {\r\n      rows = rows.filter(p =>\r\n        p.dni.includes(search) ||\r\n        p.nombre.toLowerCase().includes(search) ||\r\n        p.apellido.toLowerCase().includes(search)\r\n      );\r\n    }\r\n    return HttpResponse.json(pageOf(rows, page, size));\r\n  }),\r\n  http.get('/api/pacientes/:id', ({ params }) => {\r\n    const p = pacientes.find(x => x.id === Number(params.id));\r\n    return p ? HttpResponse.json(p) : HttpResponse.json({ detail:'Not found' }, { status:404 });\r\n  }),\r\n  http.post('/api/pacientes', async ({ request }) => {\r\n    const body = await readJsonObj(request);\r\n    const p = { id: nextId(pacientes), ...body };\r\n    pacientes.push(p as any);\r\n    return HttpResponse.json(p, { status: 201 });\r\n  }),\r\n\r\n  http.put('/api/pacientes/:id', async ({ params, request }) => {\r\n    const id = Number(params.id);\r\n    const idx = pacientes.findIndex(x => x.id === id);\r\n    if (idx < 0) return HttpResponse.json({ detail: 'Not found' }, { status: 404 });\r\n    const body = await readJsonObj(request);\r\n    pacientes[idx] = { ...pacientes[idx], ...body } as any;\r\n    return HttpResponse.json(pacientes[idx]);\r\n  }),\r\n  http.delete('/api/pacientes/:id', ({ params }) => {\r\n    const id = Number(params.id);\r\n    pacientes = pacientes.filter(x=>x.id!==id);\r\n    return new HttpResponse(null, { status:204 });\r\n  }),\r\n\r\n  // Medicos\r\n  http.get('/api/medicos', () => HttpResponse.json(medicos)),\r\n  http.get('/api/medicos/:id', ({ params }) => {\r\n    const m = medicos.find(x=>x.id===Number(params.id));\r\n    return m ? HttpResponse.json(m) : HttpResponse.json({detail:'Not found'},{status:404});\r\n  }),\r\n  // GET /api/medicos (con search) — deja el que ya pusimos\r\n  http.post('/api/medicos', async ({ request }) => {\r\n    const body = await readJsonObj(request);\r\n    const m = { id: nextId(medicos), ...body };\r\n    medicos.push(m as any);\r\n    return HttpResponse.json(m, { status: 201 });\r\n  }),\r\n\r\n  http.put('/api/medicos/:id', async ({ params, request }) => {\r\n    const id = Number(params.id);\r\n    const idx = medicos.findIndex(x => x.id === id);\r\n    if (idx < 0) return HttpResponse.json({ detail: 'Not found' }, { status: 404 });\r\n    const body = await readJsonObj(request);\r\n    medicos[idx] = { ...medicos[idx], ...body } as any;\r\n    return HttpResponse.json(medicos[idx]);\r\n  }),\r\n\r\n  http.delete('/api/medicos/:id', ({ params }) => {\r\n    const id = Number(params.id);\r\n    medicos = medicos.filter(x=>x.id!==id);\r\n    return new HttpResponse(null, { status:204 });\r\n  }),\r\n  http.get('/api/medicos/:id/agenda', ({ params }) => {\r\n    const rows = agenda.filter(a=>a.medico_id===Number(params.id));\r\n    return HttpResponse.json(rows);\r\n  }),\r\n\r\n  // Especialidades\r\n  // Especialidades\r\n  http.get('/api/especialidades', () => HttpResponse.json(especialidades)),\r\n\r\n  http.post('/api/especialidades', async ({ request }) => {\r\n    const body = await readJsonObj(request);\r\n    const nombre = String((body as any).nombre ?? '').trim();\r\n    if (!nombre) {\r\n      return HttpResponse.json({ detail: 'Nombre requerido' }, { status: 400 });\r\n    }\r\n    const e = { id: nextId(especialidades), nombre };\r\n    especialidades.push(e as any);\r\n    return HttpResponse.json(e, { status: 201 });\r\n  }),\r\n\r\n  // Turnos\r\n  http.get('/api/turnos', ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const medicoId = url.searchParams.get('medicoId');\r\n    const pacienteId = url.searchParams.get('pacienteId');\r\n    const desde = url.searchParams.get('desde');\r\n    const hasta = url.searchParams.get('hasta');\r\n    const estado = url.searchParams.get('estado');\r\n    let rows = [...turnos];\r\n    if (medicoId) rows = rows.filter(t=>t.medico_id===Number(medicoId));\r\n    if (pacienteId) rows = rows.filter(t=>t.paciente_id===Number(pacienteId));\r\n    if (desde) rows = rows.filter(t=>new Date(t.fecha_hora)>=new Date(desde));\r\n    if (hasta) rows = rows.filter(t=>new Date(t.fecha_hora)<=new Date(hasta));\r\n    if (estado) rows = rows.filter(t=>t.estado===estado);\r\n    return HttpResponse.json(rows);\r\n  }),\r\n  http.get('/api/turnos/:id', ({ params }) => {\r\n    const t = turnos.find(x=>x.id===Number(params.id));\r\n    return t ? HttpResponse.json(t) : HttpResponse.json({detail:'Not found'},{status:404});\r\n  }),\r\n  http.post('/api/turnos', async ({ request }) => {\r\n    const body = await readJsonObj(request);\r\n\r\n    const medico_id = Number((body as any).medico_id ?? 0);\r\n    const fecha_hora = String((body as any).fecha_hora ?? '');\r\n    const duracion_min = Number((body as any).duracion_min ?? 30);\r\n\r\n    if (!withinSchedule(medico_id, fecha_hora, duracion_min))\r\n      return HttpResponse.json({ detail: 'Fuera de agenda del médico' }, { status: 400 });\r\n    if (overlaps(medico_id, fecha_hora, duracion_min))\r\n      return HttpResponse.json({ detail: 'Se superpone con otro turno' }, { status: 409 });\r\n\r\n    const t = {\r\n      id: nextId(turnos),\r\n      estado: 'asignado',\r\n      estado_id: 1,\r\n      created_at: new Date().toISOString(),\r\n      ...body,\r\n      medico_id,\r\n      fecha_hora,\r\n      duracion_min,\r\n    };\r\n    turnos.push(t as any);\r\n    return HttpResponse.json(t, { status: 201 });\r\n  }),\r\n\r\n  http.patch('/api/turnos/:id/estado', async ({ params, request }) => {\r\n    const id = Number(params.id);\r\n    const idx = turnos.findIndex(x => x.id === id);\r\n    if (idx < 0) return HttpResponse.json({ detail: 'Not found' }, { status: 404 });\r\n\r\n    const body = await readJsonObj(request);\r\n    const estado = String((body as any).estado ?? '');\r\n\r\n    const valid = ['asignado','cancelado_medico','cancelado_paciente','atendido','ausente'];\r\n    if (!valid.includes(estado)) {\r\n      return HttpResponse.json({ detail: 'Estado inválido' }, { status: 400 });\r\n    }\r\n\r\n    turnos[idx] = { ...turnos[idx], estado };\r\n    return HttpResponse.json(turnos[idx]);\r\n  }),\r\n\r\n  // Recetas\r\n  http.get('/api/recetas', ({ request }) => {\r\n    const url = new URL(request.url);\r\n    const turnoId = url.searchParams.get('turnoId');\r\n    const pacienteId = url.searchParams.get('pacienteId');\r\n    const medicoId = url.searchParams.get('medicoId');\r\n    let rows = [...recetas];\r\n    if (turnoId) rows = rows.filter(r=>r.turno_id===Number(turnoId));\r\n    if (pacienteId) rows = rows.filter(r=>r.paciente_id===Number(pacienteId));\r\n    if (medicoId) rows = rows.filter(r=>r.medico_id===Number(medicoId));\r\n    return HttpResponse.json(rows);\r\n  }),\r\n  http.post('/api/recetas', async ({ request }) => {\r\n    const body = await readJsonObj(request);\r\n    const r = { id: nextId(recetas), ...body };\r\n    recetas.push(r as any);\r\n    return HttpResponse.json(r, { status: 201 });\r\n  }),\r\n\r\n];\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 372, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/facuo/OneDrive/Documentos/UTN/4to/DAO/TP-Git/tp_dao/mocks/browser.ts"],"sourcesContent":["import { setupWorker } from 'msw/browser';\r\nimport { handlers } from './handlers';\r\n\r\nexport const worker = setupWorker(...handlers);\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,MAAM,SAAS,IAAA,iKAAW,KAAI,gIAAQ","debugId":null}}]
}